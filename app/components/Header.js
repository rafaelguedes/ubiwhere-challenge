import React from 'react';
import { Link } from 'react-router-dom';
import { getUsers, postUser } from '../utils/api';

class Header extends React.Component {
  constructor(props) {
    super(props);
    this.state = {
      username: '',
      email: '',
      users: [],
      userLogged: null,
    };
    this.handleClick = this.handleClick.bind(this);
    this.onChange = this.onChange.bind(this);
  }

  componentDidMount() {
    // Get the local storage and set the state with it (persisting state when routes changes or page reloads)
    const storeState = JSON.parse(window.localStorage.getItem('headerStore'));
    if (storeState) {
      this.setState(() => ({
        username: storeState.username,
        email: storeState.email,
        userLogged: storeState.userLogged,
      }));
    }
  }

  componentDidUpdate() {
    // Set the local storage whenever state updates (persisting state when routes changes or page reloads)
    window.localStorage.setItem('headerStore', JSON.stringify(this.state));
  }

  onChange(event) {
    this.setState({ [event.target.name]: event.target.value });
  }

  askForUsers = async () => {
    const users = await getUsers();

    this.setState(() => ({ users }));
    this.isRegistered();
  };

  registerUser = async () => {
    const { username, email } = this.state;
    const post = await postUser(username, email);

    if (post.status === 200) {
      // Ask for the users array again in order to get his brand new ID, generated by the API
      this.askForUsers();
    } else {
      console.log('Something went wrong');
    }
  };

  handleClick(event) {
    const { userLogged, username, email } = this.state;

    if (userLogged) {
      this.setState(() => ({ username: '', email: '', userLogged: null }));
      window.localStorage.clear();
    } else if (username && email) {
      // Ask for users: get the users from API and check if this user is already 'registered'
      this.askForUsers();
      event.preventDefault();
    }
  }

  isRegistered() {
    const { users, username, email } = this.state;
    const { callback } = this.props;
    // Checks for this username and email in the array of users
    // If the test returns undefined means that there's a new user and need to be posted on API
    const userMatch = users.find(user => user.username === username && user.email === email);

    if (userMatch) {
      this.setState(() => ({ userLogged: userMatch.id }));
      // Callback to tell parent component that the user is logged in + his ID
      callback(this.state.userLogged);
    } else {
      this.registerUser();
    }
  }

  render() {
    const { renderLoginForm } = this.props;
    const { userLogged, username } = this.state;
    return (
      <header className="header">
        <div className="row">
          <div className="header__title col-12 col-md-3">
            <Link to="/" style={{ textDecoration: 'none', padding: 0, margin: 0 }}>
              <h1 className="heading-primary">
                Juke
                <span className="header__title-span">box</span>
                &nbsp;&#10074;&#10074;
              </h1>
            </Link>
          </div>
          {renderLoginForm ? (
            <div className="header__form col-12 col-md-9">
              <form className="header__form-group form-inline input-group-lg">
                <input
                  type="text"
                  className="header__form-group-input form-control"
                  placeholder="Your username"
                  name="username"
                  onChange={this.onChange}
                  style={{ display: userLogged ? 'none' : 'block' }}
                />
                <input
                  type="text"
                  className="header__form-group-input form-control"
                  placeholder="Your e-mail"
                  name="email"
                  onChange={this.onChange}
                  style={{ display: userLogged ? 'none' : 'block' }}
                />
                <p
                  className="header__form-greet paragraph paragraph--bold"
                  style={{ display: userLogged ? 'block' : 'none' }}
                >
                  Hi, {username}!
                </p>
                <button
                  type="submit"
                  className="header__form-group-btn btn-lg btn-primary btn-login"
                  onClick={this.handleClick}
                >
                  {userLogged ? 'Log Out' : 'Log In'}
                </button>
              </form>
            </div>
          ) : null}
        </div>
      </header>
    );
  }
}

export default Header;
